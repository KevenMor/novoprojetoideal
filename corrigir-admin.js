const { initializeApp } = require('firebase/app');
const { getAuth, signInWithEmailAndPassword } = require('firebase/auth');
const { getFirestore, collection, doc, setDoc, getDoc, getDocs, updateDoc } = require('firebase/firestore');

// Configura√ß√£o do Firebase - Projeto: Sistema Ideal
const firebaseConfig = {
  apiKey: "AIzaSyBJGbAd_1HfYqwuBPXtCn45YTZM2iiBzQ8",
  authDomain: "sistema-ideal-dbffd.firebaseapp.com",
  projectId: "sistema-ideal-dbffd",
  storageBucket: "sistema-ideal-dbffd.firebasestorage.app",
  messagingSenderId: "1011080036176",
  appId: "1:1011080036176:web:d51b087f72bfa14dbb7655"
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// Dados das unidades
const unidades = [
  'Julio de Mesquita',
  'Aparecidinha', 
  'Coop',
  'Progresso',
  'Vila Haro',
  'Vila Helena'
];

// Todas as permiss√µes do sistema
const todasPermissoes = [
  'gerenciar_usuarios', 'enviar_mensagens', 'cadastrar_contas_btg',
  'registrar_cobrancas', 'visualizar_extratos', 'configurar_sistema',
  'visualizar_relatorios', 'gerenciar_permissoes', 'visualizar_logs',
  'exportar_dados', 'importar_dados', 'backup_sistema',
  'gerenciar_unidades', 'configurar_integracao', 'visualizar_dashboard',
  'gerenciar_notificacoes', 'configurar_alertas', 'visualizar_metricas',
  'gerenciar_templates', 'configurar_webhooks', 'visualizar_auditoria',
  'gerenciar_categorias', 'configurar_automacao', 'visualizar_estatisticas',
  'gerenciar_tags', 'configurar_backup'
];

// Fun√ß√£o para buscar usu√°rio por email
async function buscarUsuarioPorEmail(email) {
  try {
    console.log(`üîç Buscando usu√°rio: ${email}`);
    
    // Tentar na cole√ß√£o 'usuarios'
    const usuariosSnapshot = await getDocs(collection(db, 'usuarios'));
    let usuarioEncontrado = null;
    let docId = null;
    
    usuariosSnapshot.forEach((doc) => {
      const data = doc.data();
      if (data.email === email) {
        usuarioEncontrado = data;
        docId = doc.id;
      }
    });
    
    if (usuarioEncontrado) {
      console.log(`‚úÖ Usu√°rio encontrado na cole√ß√£o 'usuarios'`);
      return { usuario: usuarioEncontrado, docId, colecao: 'usuarios' };
    }
    
    // Tentar na cole√ß√£o 'users'
    const usersSnapshot = await getDocs(collection(db, 'users'));
    usersSnapshot.forEach((doc) => {
      const data = doc.data();
      if (data.email === email) {
        usuarioEncontrado = data;
        docId = doc.id;
      }
    });
    
    if (usuarioEncontrado) {
      console.log(`‚úÖ Usu√°rio encontrado na cole√ß√£o 'users'`);
      return { usuario: usuarioEncontrado, docId, colecao: 'users' };
    }
    
    console.log(`‚ùå Usu√°rio n√£o encontrado: ${email}`);
    return null;
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rio:', error.message);
    return null;
  }
}

// Fun√ß√£o para corrigir permiss√µes do admin
async function corrigirAdmin(email) {
  try {
    const resultado = await buscarUsuarioPorEmail(email);
    
    if (!resultado) {
      console.log(`‚ùå Usu√°rio ${email} n√£o encontrado no Firestore`);
      console.log('üí° Vamos criar o usu√°rio no Firestore...');
      
      // Tentar fazer login para obter o UID
      try {
        console.log('üîê Digite a senha do admin para continuar...');
        // Por enquanto, vamos criar sem login
        return await criarAdminNoFirestore(email);
      } catch (e) {
        console.log('‚ùå N√£o foi poss√≠vel fazer login. Criando usu√°rio b√°sico...');
        return await criarAdminNoFirestore(email);
      }
    }
    
    const { usuario, docId, colecao } = resultado;
    
    console.log('\nüìã DADOS ATUAIS DO USU√ÅRIO:');
    console.log(`üìß Email: ${usuario.email}`);
    console.log(`üë§ Nome: ${usuario.nome || usuario.name || 'N/A'}`);
    console.log(`üè∑Ô∏è Perfil: ${usuario.perfil || usuario.role || 'N/A'}`);
    console.log(`üè¢ Unidades: ${usuario.unidades?.join(', ') || 'N/A'}`);
    console.log(`üîê Permiss√µes: ${usuario.permissoes?.length || 0} permiss√µes`);
    
    // Dados corrigidos para admin
    const dadosCorrigidos = {
      ...usuario,
      nome: usuario.nome || usuario.name || 'Administrador',
      perfil: 'admin',
      unidades: unidades,
      ativo: true,
      permissoes: todasPermissoes,
      atualizadoEm: new Date()
    };
    
    // Atualizar no Firestore
    await updateDoc(doc(db, colecao, docId), dadosCorrigidos);
    
    console.log('\n‚úÖ USU√ÅRIO CORRIGIDO COM SUCESSO!');
    console.log('üìã NOVAS CONFIGURA√á√ïES:');
    console.log(`üë§ Nome: ${dadosCorrigidos.nome}`);
    console.log(`üè∑Ô∏è Perfil: ${dadosCorrigidos.perfil}`);
    console.log(`üè¢ Unidades: ${dadosCorrigidos.unidades.join(', ')}`);
    console.log(`üîê Permiss√µes: ${dadosCorrigidos.permissoes.length} permiss√µes`);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir admin:', error.message);
    return false;
  }
}

// Fun√ß√£o para criar admin no Firestore
async function criarAdminNoFirestore(email) {
  try {
    console.log(`üîÑ Criando usu√°rio admin no Firestore: ${email}`);
    
    // Gerar um ID √∫nico (pode ser o UID do Authentication se dispon√≠vel)
    const adminId = email.replace('@', '_').replace('.', '_');
    
    const dadosAdmin = {
      email: email,
      nome: 'Administrador',
      perfil: 'admin',
      unidades: unidades,
      ativo: true,
      permissoes: todasPermissoes,
      criadoEm: new Date(),
      atualizadoEm: new Date()
    };
    
    await setDoc(doc(db, 'usuarios', adminId), dadosAdmin);
    
    console.log('‚úÖ Admin criado no Firestore com sucesso!');
    console.log('üìã CONFIGURA√á√ïES:');
    console.log(`üë§ Nome: ${dadosAdmin.nome}`);
    console.log(`üè∑Ô∏è Perfil: ${dadosAdmin.perfil}`);
    console.log(`üè¢ Unidades: ${dadosAdmin.unidades.join(', ')}`);
    console.log(`üîê Permiss√µes: ${dadosAdmin.permissoes.length} permiss√µes`);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao criar admin:', error.message);
    return false;
  }
}

// Fun√ß√£o para listar todos os usu√°rios
async function listarTodosUsuarios() {
  try {
    console.log('\nüë• LISTANDO TODOS OS USU√ÅRIOS:');
    
    const colecoes = ['usuarios', 'users'];
    
    for (const colecao of colecoes) {
      try {
        const snapshot = await getDocs(collection(db, colecao));
        if (!snapshot.empty) {
          console.log(`\nüìÅ Cole√ß√£o: ${colecao} (${snapshot.size} usu√°rios)`);
          snapshot.forEach((doc) => {
            const data = doc.data();
            console.log(`üë§ ${data.email || 'N/A'} - ${data.perfil || data.role || 'N/A'} - ${data.unidades?.join(', ') || 'N/A'}`);
          });
        }
      } catch (e) {
        console.log(`‚ùå Erro ao acessar cole√ß√£o ${colecao}:`, e.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao listar usu√°rios:', error.message);
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üîß CORRE√á√ÉO DE PERMISS√ïES DO ADMIN');
  console.log('==================================');
  
  const emailAdmin = 'admin@autoescolaideal.com';
  
  // Listar usu√°rios existentes
  await listarTodosUsuarios();
  
  // Corrigir admin
  const sucesso = await corrigirAdmin(emailAdmin);
  
  if (sucesso) {
    console.log('\nüéâ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('\nüî• PR√ìXIMOS PASSOS:');
    console.log('1. Reinicie o sistema (npm start)');
    console.log('2. Fa√ßa login com: admin@autoescolaideal.com');
    console.log('3. Acesse "Gerenciar Usu√°rios" - deve funcionar!');
    console.log('4. Teste a cria√ß√£o de novos usu√°rios');
  } else {
    console.log('\n‚ùå Falha na corre√ß√£o. Verifique os logs acima.');
  }
  
  process.exit(0);
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  buscarUsuarioPorEmail,
  corrigirAdmin,
  listarTodosUsuarios
}; 