const { initializeApp } = require('firebase/app');
const { getFirestore, collection, doc, getDocs } = require('firebase/firestore');

// Configura√ß√£o do Firebase - Projeto: Sistema Ideal
const firebaseConfig = {
  apiKey: "AIzaSyBJGbAd_1HfYqwuBPXtCn45YTZM2iiBzQ8",
  authDomain: "sistema-ideal-dbffd.firebaseapp.com",
  projectId: "sistema-ideal-dbffd",
  storageBucket: "sistema-ideal-dbffd.firebasestorage.app",
  messagingSenderId: "1011080036176",
  appId: "1:1011080036176:web:d51b087f72bfa14dbb7655"
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function debugAuthContext() {
  try {
    console.log('üîç DEBUG DO CONTEXTO DE AUTENTICA√á√ÉO');
    console.log('====================================');
    
    const usuariosSnapshot = await getDocs(collection(db, 'usuarios'));
    
    console.log(`üìä Total de usu√°rios: ${usuariosSnapshot.size}`);
    
    usuariosSnapshot.forEach((doc) => {
      const data = doc.data();
      if (data.email === 'admin@autoescolaideal.com') {
        console.log('\nüîç ADMIN ENCONTRADO:');
        console.log(`üÜî ID: ${doc.id}`);
        console.log(`üìß Email: ${data.email}`);
        console.log(`üë§ Nome: ${data.nome}`);
        console.log(`üè∑Ô∏è Perfil: ${data.perfil}`);
        console.log(`üîê Campo permissions: ${data.permissions ? 'EXISTE' : 'N√ÉO EXISTE'}`);
        console.log(`üîê Campo permissoes: ${data.permissoes ? 'EXISTE' : 'N√ÉO EXISTE'}`);
        console.log(`üëë Acesso Total: ${data.acessoTotal || false}`);
        console.log(`üè¢ Unidades: ${data.unidades?.length || 0}`);
        console.log(`‚úÖ Ativo: ${data.ativo}`);
        
        // Verificar ambos os campos de permiss√µes
        if (data.permissions) {
          console.log('\nüîê PERMISS√ïES (campo "permissions"):');
          console.log(`üìä Total: ${data.permissions.length}`);
          data.permissions.forEach((perm, index) => {
            console.log(`${index + 1}. ${perm}`);
          });
          
          // Verificar permiss√£o espec√≠fica
          if (data.permissions.includes('users.view')) {
            console.log('‚úÖ Permiss√£o "users.view" ENCONTRADA!');
          } else {
            console.log('‚ùå Permiss√£o "users.view" N√ÉO encontrada!');
          }
        }
        
        if (data.permissoes) {
          console.log('\nüîê PERMISS√ïES (campo "permissoes"):');
          console.log(`üìä Total: ${data.permissoes.length}`);
          data.permissoes.forEach((perm, index) => {
            console.log(`${index + 1}. ${perm}`);
          });
        }
        
        // Verificar estrutura completa
        console.log('\nüìã ESTRUTURA COMPLETA DO DOCUMENTO:');
        console.log(JSON.stringify(data, null, 2));
      }
    });
    
    // Simular o que o AuthContext faz
    console.log('\nüîß SIMULANDO AUTHCONTEXT...');
    
    const adminData = usuariosSnapshot.docs.find(doc => 
      doc.data().email === 'admin@autoescolaideal.com'
    )?.data();
    
    if (adminData) {
      // Simular a fun√ß√£o getPermissionsByProfile
      const getPermissionsByProfile = (profile) => {
        const profiles = {
          admin: [
            'dashboard.view', 'dashboard.all_units',
            'messages.view', 'messages.send', 'messages.history',
            'btg_accounts.view', 'btg_accounts.create', 'btg_accounts.edit', 'btg_accounts.delete',
            'charges.view', 'charges.create', 'charges.edit', 'charges.delete',
            'extracts.view', 'extracts.export', 'extracts.all_units',
            'settings.view', 'settings.sheets', 'settings.system',
            'users.view', 'users.create', 'users.edit', 'users.delete', 'users.permissions'
          ]
        };
        return profiles[profile] || [];
      };
      
      // Simular o que o AuthContext faz
      const userWithPermissions = {
        ...adminData,
        permissions: adminData.permissions || getPermissionsByProfile(adminData.perfil)
      };
      
      console.log('üîß DADOS PROCESSADOS PELO AUTHCONTEXT:');
      console.log(`üìß Email: ${userWithPermissions.email}`);
      console.log(`üè∑Ô∏è Perfil: ${userWithPermissions.perfil}`);
      console.log(`üîê Permiss√µes finais: ${userWithPermissions.permissions?.length || 0}`);
      
      // Simular hasPermission
      const hasPermission = (userPermissions, permission) => {
        if (!userPermissions || !Array.isArray(userPermissions)) {
          return false;
        }
        return userPermissions.includes(permission);
      };
      
      const temPermissaoUsuarios = hasPermission(userWithPermissions.permissions, 'users.view');
      console.log(`üîç hasPermission('users.view'): ${temPermissaoUsuarios}`);
      
      if (temPermissaoUsuarios) {
        console.log('‚úÖ O MENU "GERENCIAR USU√ÅRIOS" DEVE APARECER!');
      } else {
        console.log('‚ùå O MENU "GERENCIAR USU√ÅRIOS" N√ÉO VAI APARECER!');
        console.log('üîß PROBLEMA: Permiss√£o "users.view" n√£o encontrada');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error.message);
  }
}

async function main() {
  console.log('üîç DEBUG DO CONTEXTO DE AUTENTICA√á√ÉO');
  console.log('====================================');
  
  await debugAuthContext();
  
  console.log('\nüéØ CONCLUS√ÉO:');
  console.log('Se o admin tem a permiss√£o "users.view", o problema pode ser:');
  console.log('1. Cache do navegador');
  console.log('2. AuthContext n√£o est√° recarregando ap√≥s mudan√ßas');
  console.log('3. Problema na fun√ß√£o hasPermission');
  console.log('4. Problema no filtro do menu');
  
  console.log('\nüî• SOLU√á√ïES:');
  console.log('1. Fa√ßa LOGOUT completo');
  console.log('2. Limpe cache (Ctrl+Shift+R)');
  console.log('3. Fa√ßa LOGIN novamente');
  console.log('4. Se n√£o funcionar, reinicie o servidor React');
  
  process.exit(0);
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  debugAuthContext
}; 